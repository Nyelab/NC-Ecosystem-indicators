geom_col(position = "dodge") +
labs(x="Counts", y="Frequency", fill="") +
scale_fill_grey() +
theme(legend.justification=jus, legend.position=pos, legend.background=element_blank())
####################################
# pearson residuals vs fitted values
g4 <- ggplot(data.frame(x=object$fitted.values,
y=residuals(object, type="pearson")),
aes(x=x, y=y)) +
geom_point() + geom_smooth()
labs(x="Fitted Values", y="Pearson Residuals")
gridExtra::grid.arrange(g1, g2, g3, g4)
}
autoplot.countreg(poisson)
nbm <- glm.nb(data = moondat, Moons ~ Distance + Diameter + Mass)
summary(nbm)
summary(nbm)
e^-0.009289
1-0.009289
label <- nbm$formula
g1 <- autoplot(rootogram(nbm, style = "hanging", plot = FALSE)) + labs(x="Moons ~ Distance + Diameter + Mass", y="sqrt(Frequency)", title = "Negative binomial model")
g2 <- autoplot(rootogram(poisson, style = "hanging", plot = FALSE)) + labs(x="Moons ~ Distance + Diameter + Mass", y="sqrt(Frequency)", title = "Poisson")
gridExtra::grid.arrange(g1, g2)
nbm$coefficients
View(moondat)
jupitermoons <- -0.425687708 + 0.019987972(5.20) + 0.652044756(11.209) - 0.009289331(317.8000)
-0.425687708 + 0.019987972(5.20) + 0.652044756(11.209) - 0.009289331(317.8000)
jupitermoons <- -0.425687708 + 0.019987972(5.20) + 0.652044756(11.209) - 0.009289331(317.8000)
jupitermoons <- -0.425687708 + 0.019987972* 5.20 + 0.652044756 * 11.209 - 0.009289331* 317.8000
jupitermoons
nbm$coefficients
0.019987972* 5.20
0.652044756 * 11.209
0.009289331* 317.8000
nbm <- glm.nb(data = moondat, Moons ~ Distance + Diameter + Mass)
summary(nbm)
?predict
nbm$model
summary(nbm)
nbm$model
jupitermoons <- filter(moondat, Name == "Jupiter")
predict(nbm, jupitermoons, type = "response")
zinb <- zeroinfl(Moons ~ Distance + Diameter + Mass | ## Predictor for the Poisson process
Distance + Diameter + Mass, ## Predictor for the Bernoulli process;
dist = 'negbin',
data = moondat)
summary(zinb)
E2 <- resid(zinb, type = "pearson")
N  <- nrow(moondat)
p  <- length(coef(zinb))
sum(E2^2) / (N - p)
lrtest(nbm, poisson, zinb)
AIC(nbm, poisson, zinb)
lrtest(nbm, poisson, zinb)
AIC(nbm, poisson, zinb)
sum(E2^2) / (N - p)
lrtest(nbm, poisson, zinb)
summary(zinb)
ele_pois1 <-  glm((Moons ~ Distance + Diameter + Mass, data = moondat, family="poisson")
ele_pois1 <-  glm(Moons ~ Distance + Diameter + Mass, data = moondat, family="poisson")
check_zeroinflation(ele_pois1)
E2 <- resid(ele_pois1, type = "pearson")
N  <- nrow(eledat1)
p  <- length(coef(ele_pois1))
N  <- nrow(moondat)
p  <- length(coef(ele_pois1))
sum(E2^2) / (N - p)
zinb <- zeroinfl(Moons ~ Distance + Diameter + Mass | ## Predictor for the Poisson process
Distance + Diameter + Mass, ## Predictor for the Bernoulli process;
dist = 'poisson',
data = moondat)
summary(zinb)
E2 <- resid(zinb, type = "pearson")
N  <- nrow(moondat)
p  <- length(coef(zinb))
sum(E2^2) / (N - p)
zinb <- zeroinfl(Moons ~ Distance + Diameter + Mass | ## Predictor for the Poisson process
Distance + Diameter + Mass, ## Predictor for the Bernoulli process;
dist = 'negbin',
data = moondat)
summary(zinb)
E2 <- resid(zinb, type = "pearson")
N  <- nrow(moondat)
p  <- length(coef(zinb))
sum(E2^2) / (N - p)
lrtest(nbm, poisson, zinb)
AIC(nbm, poisson, zinb)
linear <- lm(data = moondat, Moons ~ Distance + Diameter + Mass)
linear
check_model(linear)
1-pchisq(poisson$deviance, poisson$df.residual)
pois_0 <- glm(Moons ~ 1, data = moondat, family="poisson")
lrtest(pois_0, poisson)
temps <- read.csv("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/deqcontinuousstations.csv")
temps <- dplyr::select(temps, LocationID, lat, long, date, month, year, name.x, measure, unit)
names(temps) <- c("LocationID", "lat", "long", "date", "month", "year", "name", "measure", "unit")
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- temps
tryph <- filter(df, name %in% "pH")
colnames(tryph) <- paste(colnames(tryph),"pH",sep="_")
colnames(tryph)[1] <- c("LocationID")
colnames(tryph)[4] <- c("date")
colnames(tryph)[2:3] <- c("lat", "long")
tryph$measure_pH <- as.numeric(tryph$measure_pH)
trydo <- filter(df, name %in% "Dissolved oxygen (DO)")
colnames(trydo) <- paste(colnames(trydo),"do",sep="_")
colnames(trydo)[1] <- c("LocationID")
colnames(trydo)[4] <- c("date")
colnames(trydo)[2:3] <- c("lat", "long")
trydo$measure_do <- as.numeric(trydo$measure_do)
#Salinity
trysal <- filter(df, name %in% "Salinity")
colnames(trysal) <- paste(colnames(trysal),"sal",sep="_")
colnames(trysal)[1] <- c("LocationID")
colnames(trysal)[4] <- c("date")
colnames(trysal)[2:3] <- c("lat", "long")
trysal$measure_sal <- as.numeric(trysal$measure_sal)
newsal <- trysal %>% filter(unit_sal == "g/l")
trysal <- anti_join(trysal, newsal, by="unit_sal")
# trysal$measure_sal <- apply(trysal$measure_sal, 1, function(x) {ifelse(any(x == 0), NA, length(unique(x)))})
#Temperature
trytemp <- filter(df, name %in% "Temperature, water")
colnames(trytemp) <- paste(colnames(trytemp),"temp",sep="_")
colnames(trytemp)[1] <- c("LocationID")
colnames(trytemp)[4] <- c("date")
colnames(trytemp)[2:3] <- c("lat", "long")
trytemp$measure_temp <- as.numeric(trytemp$measure_temp)
#put all data frames into list
trydf_list <- list(trysal, trytemp, trydo, tryph)
label <- c("salinity", "temperature", "dissolvedoxygen", "pH")
df <- trydf_list[[j]]
j = 1
df <- trydf_list[[j]]
colnames(df)[8] <- c("measure")
df <- df %>% group_by(LocationID, lat, long, date) %>% mutate(mean = mean(measure))
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$year <- as.numeric(as.character(df$year))
df$month <- format(df$date,"%m")
df$month <- as.numeric(as.character(df$month))
df <- df %>% dplyr::select(date, month, year, lat, long, mean, LocationID)
names(df) <- c("date", "month", "year", "latitude", "longitude", "mean", "LocationID")
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
grid <- st_set_crs(grid, 4326)
#spatial intersections?
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
#pretty picture
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID), size = 0.8) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Indicators Subset")) + xlab("Longitude") + ylab("Latitude")
locations <- unique(df_extract_2_2$gridID)
allvariables <- list()
p <- list()
locations
#select by region
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude) %>% filter(gridID == locations[i])
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude, color = "blue")) +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
i = 2
i = 1
#select by region
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude) %>% filter(gridID == locations[i])
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude, color = "blue")) +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude), color = "blue") +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
View(df)
df <- merge(df, season, by = "month", all.x = TRUE)
hist(df$mean)
df_outliers <- df %>% identify_outliers(mean)
df <- df %>% anti_join(df_outliers, by = c("date", "latitude", "longitude"))
View(df)
#summarize by year and season
finaldf <- df %>% group_by(year, season) %>% summarise(mean = mean(mean, na.rm = TRUE), samplesize = n()) %>% ungroup()
View(finalallvariables)
View(finaldf)
finaldf$id <- locations[i]
names(finaldf)[names(finaldf) == 'mean'] <- paste("mean",label[j],sep="_")
names(finaldf)[names(finaldf) == 'samplesize'] <- paste("samplesize",label[j],sep="_")
allvariables[[i]] <- finaldf
#plot time series
colnames(finaldf)[3] <- c("mean")
ts_df <- finaldf %>% dplyr::select(mean)
ts_df <- ts(ts_df, frequency = 4, start = min(finaldf$year))
# png(paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i], label[j],  "timeseriesDEQ.png"))
plot.ts(ts_df) + title(main = paste(locations[i], label[j]), adj = 1)
salinity2018 <- filter(finaldf, year == 2018)
salinity2018 <- filter(df, year == 2018)
getwd()
setwd("~/")
getwd()
write.csv(salinity2018, "salinitypamlico2018")
write.csv(salinity2018, "salinitypamlico2018.csv")
salinity2015 <- filter(df, year == 2015)
write.csv(salinity2018, "salinitypamlico2015.csv")
View(salinity2015)
salinity2018 <- df %>% filter(year == 2018) %>% select(date, month, year, mean, longitude, latitude, season)
salinity2018 <- df %>% filter(year == 2018) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2018, "salinitypamlico2018.csv")
salinity2015 <- df %>% filter(year == 2015) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2018, "salinitypamlico2015.csv")
salinity2005 <- df %>% filter(year == 2005) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
salinity2015 <- df %>% filter(year == 2015) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2015, "salinitypamlico2015.csv")
salinity2005 <- df %>% filter(year == 2005) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2005, "salinitypamlico2005.csv")
label
j = 1
j = 2
df <- trydf_list[[j]]
colnames(df)[8] <- c("measure")
df <- df %>% group_by(LocationID, lat, long, date) %>% mutate(mean = mean(measure))
# merged <- merge(df, trydepth, by = c( "datetime", "lat", "long"), all.x = TRUE)
# merged$date <- as.Date(merged$datetime)
# merged$year <- format(merged$date,"%Y")
# merged$year <- as.numeric(as.character(merged$year))
# merged$month <- format(merged$date,"%m")
# merged$month <- as.numeric(as.character(merged$month))
# merged$depth_depth <- as.numeric(merged$depth_depth)
# colnames(merged)[13] <- c("name")
# names(merged)[names(merged) == 'lat'] <- 'latitude'
# names(merged)[names(merged) == 'long'] <- 'longitude'
# merged <- merged %>% dplyr::select(datetime, month, year, latitude, longitude, mean, depth_depth, activityID.x)
# df <- merged
#no depth
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$year <- as.numeric(as.character(df$year))
df$month <- format(df$date,"%m")
df$month <- as.numeric(as.character(df$month))
df <- df %>% dplyr::select(date, month, year, lat, long, mean, LocationID)
names(df) <- c("date", "month", "year", "latitude", "longitude", "mean", "LocationID")
#intersect spatially
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
grid <- st_set_crs(grid, 4326)
#spatial intersections?
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
#pretty picture
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID), size = 0.8) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Indicators Subset")) + xlab("Longitude") + ylab("Latitude")
locations <- unique(df_extract_2_2$gridID)
allvariables <- list()
temp2018 <- df %>% filter(year == 2018) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
temp2018 <- df %>% filter(year == 2018) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
#check locations 4/3
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude)
df <- merge(df, season, by = "month", all.x = TRUE)
temp2018 <- df %>% filter(year == 2018) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2018, "temp2018.csv")
temp2015 <- df %>% filter(year == 2015) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2015, "temp2015.csv")
temp2005 <- df %>% filter(year == 2005) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2005, "temp2005.csv")
temp1997 <- df %>% filter(year == 1997) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(salinity2005, "temp1997.csv")
temp2018 <- df %>% filter(year == 2018) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(temp2018, "temp2018.csv")
temp2015 <- df %>% filter(year == 2015) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(temp2015, "temp2015.csv")
temp2005 <- df %>% filter(year == 2005) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(temp2005, "temp2005.csv")
temp1997 <- df %>% filter(year == 1997) %>% dplyr::select(date, month, year, mean, longitude, latitude, season)
write.csv(temp1997, "temp1997.csv")
locations
j = 5
locations[5]
#select by region
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude) %>% filter(gridID == locations[i])
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude), color = "blue") +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
#merge by season
df <- merge(df, season, by = "month", all.x = TRUE)
hist(df$mean)
df_outliers <- df %>% identify_outliers(mean)
df <- df %>% anti_join(df_outliers, by = c("date", "latitude", "longitude"))
#summarize by year and season
finaldf <- df %>% group_by(year, season) %>% summarise(mean = mean(mean, na.rm = TRUE), samplesize = n()) %>% ungroup()
finaldf$id <- locations[i]
names(finaldf)[names(finaldf) == 'mean'] <- paste("mean",label[j],sep="_")
names(finaldf)[names(finaldf) == 'samplesize'] <- paste("samplesize",label[j],sep="_")
allvariables[[i]] <- finaldf
#plot time series
colnames(finaldf)[3] <- c("mean")
ts_df <- finaldf %>% dplyr::select(mean)
ts_df <- ts(ts_df, frequency = 4, start = min(finaldf$year))
# png(paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i], label[j],  "timeseriesDEQ.png"))
plot.ts(ts_df) + title(main = paste(locations[i], label[j]), adj = 1)
i
j
df <- trydf_list[[j]]
df <- trydf_list[[j]]
colnames(df)[8] <- c("measure")
df <- df %>% group_by(LocationID, lat, long, date) %>% mutate(mean = mean(measure))
df <- trydf_list[[j]]
j
i
df <- trydf_list[[j]]
j
#sampling frequency
df <- trydf_list[[j]]
#put all data frames into list
trydf_list <- list(trysal, trytemp, trydo, tryph)
label <- c("salinity", "temperature", "dissolvedoxygen", "pH")
#sampling frequency
df <- trydf_list[[j]]
View(trysal)
j = 1
df <- trydf_list[[j]]
colnames(df)[8] <- c("measure")
df <- df %>% group_by(LocationID, lat, long, date) %>% mutate(mean = mean(measure))
#no depth
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$year <- as.numeric(as.character(df$year))
df$month <- format(df$date,"%m")
df$month <- as.numeric(as.character(df$month))
df <- df %>% dplyr::select(date, month, year, lat, long, mean, LocationID)
names(df) <- c("date", "month", "year", "latitude", "longitude", "mean", "LocationID")
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
grid <- st_set_crs(grid, 4326)
#spatial intersections?
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
#pretty picture
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID), size = 0.8) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Indicators Subset")) + xlab("Longitude") + ylab("Latitude")
locations <- unique(df_extract_2_2$gridID)
allvariables <- list()
p <- list()
locations
i = 6
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude) %>% filter(gridID == locations[i])
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude), color = "blue") +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
#merge by season
df <- merge(df, season, by = "month", all.x = TRUE)
hist(df$mean)
df_outliers <- df %>% identify_outliers(mean)
df <- df %>% anti_join(df_outliers, by = c("date", "latitude", "longitude"))
#summarize by year and season
finaldf <- df %>% group_by(year, season) %>% summarise(mean = mean(mean, na.rm = TRUE), samplesize = n()) %>% ungroup()
finaldf$id <- locations[i]
names(finaldf)[names(finaldf) == 'mean'] <- paste("mean",label[j],sep="_")
names(finaldf)[names(finaldf) == 'samplesize'] <- paste("samplesize",label[j],sep="_")
allvariables[[i]] <- finaldf
#plot time series
colnames(finaldf)[3] <- c("mean")
ts_df <- finaldf %>% dplyr::select(mean)
ts_df <- ts(ts_df, frequency = 4, start = min(finaldf$year))
# png(paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i], label[j],  "timeseriesDEQ.png"))
plot.ts(ts_df) + title(main = paste(locations[i], label[j]), adj = 1)
View(finaldf)
for(j in 1:length(trydf_list)) {
df <- trydf_list[[j]]
colnames(df)[8] <- c("measure")
df <- df %>% group_by(LocationID, lat, long, date) %>% mutate(mean = mean(measure))
# merged <- merge(df, trydepth, by = c( "datetime", "lat", "long"), all.x = TRUE)
# merged$date <- as.Date(merged$datetime)
# merged$year <- format(merged$date,"%Y")
# merged$year <- as.numeric(as.character(merged$year))
# merged$month <- format(merged$date,"%m")
# merged$month <- as.numeric(as.character(merged$month))
# merged$depth_depth <- as.numeric(merged$depth_depth)
# colnames(merged)[13] <- c("name")
# names(merged)[names(merged) == 'lat'] <- 'latitude'
# names(merged)[names(merged) == 'long'] <- 'longitude'
# merged <- merged %>% dplyr::select(datetime, month, year, latitude, longitude, mean, depth_depth, activityID.x)
# df <- merged
#no depth
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$year <- as.numeric(as.character(df$year))
df$month <- format(df$date,"%m")
df$month <- as.numeric(as.character(df$month))
df <- df %>% dplyr::select(date, month, year, lat, long, mean, LocationID)
names(df) <- c("date", "month", "year", "latitude", "longitude", "mean", "LocationID")
#intersect spatially
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
grid <- st_set_crs(grid, 4326)
#spatial intersections?
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
#pretty picture
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
#csv <- dplyr::select(df_extract_2_2, datetime, mean, Class, latitude, longitude)
#write.csv(csv, "C:/Users/Camryn/Documents/temperature.csv")
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID), size = 0.8) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Indicators Subset")) + xlab("Longitude") + ylab("Latitude")
# ggsave("indicatorssubset.png")
locations <- unique(df_extract_2_2$gridID)
allvariables <- list()
p <- list()
for (i in 1:length(locations)) {
#select by region
df <- df_extract_2_2 %>% dplyr::select(date, month, year, mean, gridID, geometry, longitude, latitude) %>% filter(gridID == locations[i])
#plot map
ggplot(data = world) + geom_sf() + geom_sf(data = shape) + geom_point(data = df, aes(x = longitude, y = latitude), color = "blue") +
coord_sf(xlim=c(-78, -75.5), ylim=c(33.6,36.5), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste(locations[i], "Subset")) + xlab("Longitude") + ylab("Latitude")
#merge by season
df <- merge(df, season, by = "month", all.x = TRUE)
hist(df$mean)
df_outliers <- df %>% identify_outliers(mean)
df <- df %>% anti_join(df_outliers, by = c("date", "latitude", "longitude"))
#summarize by year and season
finaldf <- df %>% group_by(year, season) %>% summarise(mean = mean(mean, na.rm = TRUE), samplesize = n()) %>% ungroup()
finaldf$id <- locations[i]
names(finaldf)[names(finaldf) == 'mean'] <- paste("mean",label[j],sep="_")
names(finaldf)[names(finaldf) == 'samplesize'] <- paste("samplesize",label[j],sep="_")
allvariables[[i]] <- finaldf
#plot time series
colnames(finaldf)[3] <- c("mean")
ts_df <- finaldf %>% dplyr::select(mean)
ts_df <- ts(ts_df, frequency = 4, start = min(finaldf$year))
# png(paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i], label[j],  "timeseriesDEQ.png"))
plot.ts(ts_df) + title(main = paste(locations[i], label[j]), adj = 1)
# dev.off()
p[[i]] <- plot.ts(ts_df) + title(main = paste(locations[i], label[j]), adj = 1)
}
# do.call(grid.arrange, p)
final <- do.call("rbind", allvariables)
assign(label[j], final)
}
allvariables <- list(salinity, temperature, dissolvedoxygen, pH)
finalallvariables <- Reduce(function(x, y) merge(x, y, by = c("year", "season", "id"), all = TRUE), allvariables)
View(finalallvariables)
i = 1
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
View(df1)
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
i
i = 2
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
i = 3
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
i = 4
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
# df2 <- filter(df2, samplesize_temperature > 5)
# df2 <- filter(df1, samplesize_salinity > 5)
# df2 <- filter(df2, samplesize_dissolvedoxygen > 5)
# df2 <- filter(df2, samplesize_pH > 5)
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
i
i = 5
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
# df2 <- filter(df2, samplesize_temperature > 5)
# df2 <- filter(df1, samplesize_salinity > 5)
# df2 <- filter(df2, samplesize_dissolvedoxygen > 5)
# df2 <- filter(df2, samplesize_pH > 5)
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
i
i = 6
df1 <- finalallvariables %>% dplyr::filter(id == locations[i])
# df2 <- filter(df2, samplesize_temperature > 5)
# df2 <- filter(df1, samplesize_salinity > 5)
# df2 <- filter(df2, samplesize_dissolvedoxygen > 5)
# df2 <- filter(df2, samplesize_pH > 5)
write.csv(df1, paste0("G:/My Drive/NCTempProject/NC DEQ Ambient Monitoring System (estuarine stations only)/", locations[i],  "timeseriesDEQ.csv"))
getwd
getwd()
setwd("~/NC-Ecosystem-indicators/scripts")
