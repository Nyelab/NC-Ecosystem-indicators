View(interval)
interval$type <- "confidence"
interval %>% kable() %>% kable_styling()
interval$type <- "prediction"
interval$type[1] <- "confidence"
interval$type[11] <- "prediction"
interval$type[2] <- "prediction"
interval %>% kable() %>% kable_styling()
rownames(interval) <- NULL
interval %>% kable() %>% kable_styling()
report(finalmodel)
nc <- filter(carbon, state == "North Carolina")
northcarolinapred <- 2.927357 - 0.054214 * nc$temp + 0.005707*nc$climatechange + 0.013273* nc$urban_percent - 0.635119 * as.numeric(nc$west)
northcarolinapred
interval <- as.data.frame(predict(finalmodel, newdata = data.frame("temp" = 59, "climatechange" = 31, urban_percent = 66.1, west = "0"), interval = "confidence", level = 0.95))
interval$type[1] <- "confidence"
interval <- rbind(interval, as.data.frame(predict(finalmodel, newdata = data.frame("temp" = 59, "climatechange" = 31, urban_percent = 66.1, west = "0"), interval = "prediction", level = 0.95)))
interval %>% kable() %>% kable_styling()
avPlots(finalmodel)
# report(finalmodel)
# summary(finalmodel)
plot_coefs(finalmodel)
avPlots(finalmodel)
gvlma(finalmodel)
check_model(finalmodel)
```{r, recheck assumptions, echo = FALSE, message = FALSE, warning = FALSE}
summary <- summary(finalmodel)
tab_model(finalmodel)
gvlma(finalmodel)
check_model(finalmodel)
report(lm2)
assumptions <- gvlma(finalmodel)
gc()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(chron)
stations  <- read.csv("H:/My Drive/Nye Lab/MASC 490/NyeLab/TempDatasets/NC DEQ Ambient Monitoring System/station.csv")
stations <- dplyr::select(stations, OrganizationFormalName, MonitoringLocationIdentifier, MonitoringLocationName, LatitudeMeasure, LongitudeMeasure)
names(stations) <- c("org", "LocationID", "name", "lat", "long")
temps <- read.csv("H:/My Drive/Nye Lab/MASC 490/NyeLab/TempDatasets/NC DEQ Ambient Monitoring System/narrowresult.csv")
temps <- temps %>% filter(CharacteristicName %in% "Temperature, water"|CharacteristicName %in% "pH"|CharacteristicName %in% "Dissolved oxygen (DO)"|CharacteristicName %in% "Salinity")
temps <- dplyr::select(temps,  MonitoringLocationIdentifier, ActivityStartDate, ActivityStartTime.Time, ActivityStartTime.TimeZoneCode, ActivityIdentifier, CharacteristicName, ResultMeasureValue, ResultMeasure.MeasureUnitCode)
names(temps) <- c("LocationID", "date", "time", "timezone", "activityID","name", "measure", "unit")
temps$datetime <- paste(temps$date, temps$time, sep = " ")
df <- left_join(temps, stations, by = "LocationID")
depth <- read.csv("H:/My Drive/Nye Lab/MASC 490/NyeLab/TempDatasets/NC DEQ Ambient Monitoring System/activityall.csv")
depth <- dplyr::select(depth, ActivityStartDate, ActivityStartTime.Time, ActivityStartTime.TimeZoneCode, ActivityDepthHeightMeasure.MeasureValue, ActivityDepthHeightMeasure.MeasureUnitCode, ActivityIdentifier, MonitoringLocationIdentifier, ActivityCommentText, ActivityLocation.LatitudeMeasure, ActivityLocation.LongitudeMeasure)
names(depth) <- c("date", "time", "timezone", "depth", "unit", "activityID", "locationID", "notes", "latitude", "longitude")
#filter new dataframe each variable
#ph
ph <- filter(df, name.x %in% "pH")
colnames(ph) <- paste(colnames(ph),"pH",sep="_")
colnames(ph)[9] <- c("datetime")
colnames(ph)[12:13] <- c("lat", "long")
#do
do <- filter(df, name.x %in% "Dissolved oxygen (DO)")
colnames(do) <- paste(colnames(do),"do",sep="_")
colnames(do)[9] <- c("datetime")
colnames(do)[12:13] <- c("lat", "long")
#sal
sal <- filter(df, name.x %in% "Salinity")
colnames(sal) <- paste(colnames(sal),"sal",sep="_")
colnames(sal)[9] <- c("datetime")
colnames(sal)[12:13] <- c("lat", "long")
#temp
temp <- filter(df, name.x %in% "Temperature, water")
colnames(temp) <- paste(colnames(temp),"temp",sep="_")
colnames(temp)[9] <- c("datetime")
colnames(temp)[12:13] <- c("lat", "long")
#put all data frames into list
df_list <- list(sal, temp, do)
#merge all data frames in list
newdf <- Reduce(function(x, y) merge(x, y, by = c("datetime", "lat", "long")), df_list)
newdf <- dplyr::select(newdf, datetime, lat, long, date_sal, time_sal, measure_sal, measure_temp, measure_do)
#try to do again with depth
tryph <- filter(df, name.x %in% "pH")
colnames(tryph) <- paste(colnames(tryph),"pH",sep="_")
# colnames(tryph)[5] <- c("activityID")
colnames(tryph)[9] <- c("datetime")
colnames(tryph)[12:13] <- c("lat", "long")
names(tryph)
trydo <- filter(df, name.x %in% "Dissolved oxygen (DO)")
colnames(trydo) <- paste(colnames(trydo),"do",sep="_")
# colnames(trydo)[5] <- c("activityID")
colnames(trydo)[9] <- c("datetime")
colnames(trydo)[12:13] <- c("lat", "long")
names(trydo)
trysal <- filter(df, name.x %in% "Salinity")
colnames(trysal) <- paste(colnames(trysal),"sal",sep="_")
# colnames(trysal)[5] <- c("activityID")
colnames(trysal)[9] <- c("datetime")
colnames(trysal)[12:13] <- c("lat", "long")
names(trysal)
trytemp <- filter(df, name.x %in% "Temperature, water")
colnames(trytemp) <- paste(colnames(trytemp),"temp",sep="_")
# colnames(trytemp)[5] <- c("activityID")
colnames(trytemp)[9] <- c("datetime")
colnames(trytemp)[12:13] <- c("lat", "long")
names(trytemp)
#try depth
depth$date <- as.POSIXct(depth$date, format ="%Y-%m-%d")
depth$time <- times(depth$time)
depth$datetime <- as.POSIXct(paste(depth$date, depth$time), format = "%Y-%m-%d %H:%M:%S")
trydepth <- dplyr::select(depth, depth, datetime, timezone, time, latitude, longitude)
colnames(trydepth) <- paste(colnames(trydepth),"depth",sep="_")
trydepth$datetime_depth <- as.character(trydepth$datetime_depth)
# colnames(trydepth)[5] <- c("activityID")
colnames(trydepth)[2] <- c("datetime")
colnames(trydepth)[5:6] <- c("lat", "long")
names(trydepth)
#put all data frames into list
trydf_list <- list(trysal, trytemp, trydo, trydepth)
#merge all data frames in list
names <- names(tryph)
names <- rbind(names, names(trydo))
names <- rbind(names, names(trysal))
names <- rbind(names, names(trytemp))
names <- rbind(names, names(trydepth))
trynewdf <- Reduce(function(x, y) merge(x, y, by = c("datetime", "lat", "long")), list(tryph, trysal, trytemp, trydo, trydepth))
trynewdf <- Reduce(function(x, y) merge(x, y, by = c("datetime", "lat", "long")), list(tryph, trysal, trytemp, trydo, trydepth))
trynewdf <- Reduce(function(x, y) merge(x, y, by = c("datetime", "lat", "long")), list(tryph, trysal, trytemp, trydo, trydepth))
trynewdf <- dplyr::select(trynewdf, datetime, lat, long, date_sal, time_sal, measure_pH, measure_sal, measure_temp, measure_do, depth_depth)
View(trynewdf)
getwd()
#subset by SAV regions
require(sf)
shape <- read_sf(dsn = ".", layer = "C:\Users\Camryn\Documents\ArcGIS\ExportFeature.shp")
getwd()
shape <- read_sf(dsn = ".", layer = "~\ArcGIS\ExportFeature.shp")
shape <- read_sf(dsn = ".", layer = "~ArcGIS\ExportFeature.shp")
shape <- read_sf(dsn = ".", layer = "ExportFeature.shp")
setwd("C:/Users/Camryn/Documents/ArcGIS")
shape <- read_sf(dsn = ".", layer = "ExportFeature.shp")
shape <- read_sf(dsn = ".", layer = "ExportFeature.shp")
shape <- sf::read_sf(dsn = ".", layer = "ExportFeature.shp")
shape <- sf::read_sf(layer = "ExportFeature.shp")
shape <- sf::read_df(file.path("C:/Users/Camryn/Documents/ArcGIS/ExportFeature.shp"))
shape <- sf::read_sf(file.path("C:/Users/Camryn/Documents/ArcGIS/ExportFeature.shp"))
library(tidyverse)
library(data.table)
library(stringr)
library(sf)
library(sp)
library(spatialEco)
library(rnaturalearth)
library(scales)
library(ggpmisc)
library(RColorBrewer)
#checkit
ggplot(data = world) + geom_sf() +geom_sf(data = shape) +
coord_sf(xlim=c(-80, -70), ylim=c(30,40), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black"))
#get spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
#checkit
ggplot(data = world) + geom_sf() +geom_sf(data = shape) +
coord_sf(xlim=c(-80, -70), ylim=c(30,40), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black"))
#checkit
ggplot(data = world) + geom_sf() +geom_sf(data = shape) +
coord_sf(xlim=c(-80, -70), ylim=c(30,40), expand = TRUE) + theme(panel.background = element_rect(fill = "pink", colour = "black"))
#checkit
ggplot(data = world) + geom_sf() +geom_sf(data = shape, fill = "blue") +
coord_sf(xlim=c(-80, -70), ylim=c(30,40), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black"))
df <- read.csv("G:/My Drive/NCTempProject/P195/p195final.csv")
df$date <- as.Date(df$date, tryFormats = c("%m/%d/%Y"))
df$month <- format(df$date, "%m")
df <- df %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude) %>% na.omit
#idk what this does
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
#spatial intersections? idk 9 min DEQ
df_extract <- st_intersection(df, grid)
?st_set_crs
shape <- sf::read_sf(file.path("C:/Users/Camryn/Documents/ArcGIS/ExportFeature.shp"), crs = 4326)
shape <- st_transform(shape, crs = 4326)
grid <- shape
#spatial intersections?
df_extract <- st_intersection(df, grid)
require(sf)
shape <- sf::read_sf(dsn = ".", layer = "ExportFeature.shp")
shape <- sf::read_sf(dsn = ".", layer = "ExportFeature.shp")
shape <- sf::read_sf(file.path("C:/Users/Camryn/Documents/ArcGIS/ExportFeature.shp"))
shape <- st_transform(shape, crs = 4326)
grid <- shape
#spatial intersections?
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
View(df_extract_2)
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste(label[i], "Subsetted Points")) + ggtitle(paste(label, "Grid Subset")) + xlab("Longitude") + ylab("Latitude")
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste(label[i], "Subsetted Points")) + ggtitle(paste(label, "Grid Subset")) + xlab("Longitude") + ylab("Latitude")
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste(label[i], "Subsetted Points")) + ggtitle(paste("Grid Subset")) + xlab("Longitude") + ylab("Latitude")
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Grid Subset")) + xlab("Longitude") + ylab("Latitude")
View(df_extract_2_2)
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
View(df)
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(seasons)
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, seasons, by = "month", all.x = TRUE)
df <- merge(df, season, by = "month", all.x = TRUE)
View(df)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class = "NORTH") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "NORTH") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class)
df$month <- as.numeric(as.character(df$month))
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "NORTH") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
standard_error <- function(x) sd(x) / sqrt(length(x))
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meando = mean(surfacedo), sedo = standard_error(surfacedo))
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO))
View(finaldf)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = count(temp))
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = n(temp))
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = n())
northfinaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = n())
View(northfinaldf)
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "CENTRAL") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
centralfinaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = n())
View(centralfinaldf)
write.csv(centralfinaldf, "C:/Users/Camryn/Documents/NC-Ecosystem-indicators/data/p1996CentralPamlicoWaterCB.csv")
getwd
write.csv(northfinaldf, "C:/Users/Camryn/Documents/NC-Ecosystem-indicators/data/p1996NorthPamlicoWaterCB.csv")
unique(df_extract_2_2$Class)
ggplot(df, aes(year, meantemp, group = Class, color=Class)) + facet_wrap(~ seasons, scales = "free") + geom_point() + geom_line() +  geom_errorbar(aes(ymax = meantemp + setemp, ymin = meantemp - setemp))
ggplot(df, aes(year, meantemp, group = Class, color=Class)) + facet_wrap(~ season, scales = "free") + geom_point() + geom_line() +  geom_errorbar(aes(ymax = meantemp + setemp, ymin = meantemp - setemp))
df <- rbind(centralfinaldf, northfinaldf)
ggplot(df, aes(year, meantemp, group = Class, color=Class)) + facet_wrap(~ season, scales = "free") + geom_point() + geom_line() +  geom_errorbar(aes(ymax = meantemp + setemp, ymin = meantemp - setemp))
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "NORTH") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
northdf <- df
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "CENTRAL") %>% dplyr::select(date, temp, surfacesalinity, surfaceDO, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
centraldf <- df
df <- rbind(northdf, centraldf)
ggplot(df, aes(year, meantemp, group = Class, color=Class)) + facet_wrap(~ season, scales = "free") + geom_point() + geom_line() +  geom_errorbar(aes(ymax = meantemp + setemp, ymin = meantemp - setemp))
View(df)
ggplot(df, aes(year, temp, group = Class, color=Class)) + facet_wrap(~ season, scales = "free") + geom_point() + geom_line()
getwd()
setwd("~/spring2023/biol562/lab7/Week_7_Resources")
setwd("~/spring2023/biol562/lab7/Week_7_Resources")
getwd()
setwd("~/spring2023/biol562/lab7/Week_7_Resources")
getwd()
#install.packages(tidyverse)
library(tidyverse)
#install.packages(lubridate)
library(lubridate)
detach("package:dplyr") #doing this makes it so stats doesn't interfere with your dplyr filter function
library(dplyr)
library(plyr)
NTL.phys.data <- read.csv("NTL-LTER_Lake_ChemistryPhysics_Raw.csv", stringsAsFactors = TRUE)
NTL.phys.data <- read.csv("Data/NTL-LTER_Lake_ChemistryPhysics_Raw.csv", stringsAsFactors = TRUE)
setwd("~/spring2023/biol562/lab7/Week_7_Resources")
getwd()
#install.packages(tidyverse)
library(tidyverse)
#install.packages(lubridate)
library(lubridate)
detach("package:dplyr") #doing this makes it so stats doesn't interfere with your dplyr filter function
library(dplyr)
library(plyr)
NTL.phys.data <- read.csv("Data/NTL-LTER_Lake_ChemistryPhysics_Raw.csv", stringsAsFactors = TRUE)
colnames(NTL.phys.data)
head(NTL.phys.data)
summary(NTL.phys.data)
str(NTL.phys.data)
dim(NTL.phys.data)
class(NTL.phys.data$sampledate)
# Format sampledate as date
NTL.phys.data$sampledate <- as.Date(NTL.phys.data$sampledate, format = "%m/%d/%y")
View(NTL.phys.data)
?arrange
?arrange
require(sf)
shape <- sf::read_sf(file.path("C:\Users\Camryn\Documents\ArcGIS\Projects\SAV\rivers.shp.xml"))
shape <- sf::read_sf(file.path("C:/Users/Camryn/Documents/ArcGIS/Projects/SAV/rivers.shp"))
shape <- st_transform(shape, crs = 4326)
library(tidyverse)
library(data.table)
library(stringr)
library(sf)
library(sp)
library(spatialEco)
library(rnaturalearth)
library(scales)
library(ggpmisc)
library(RColorBrewer)
standard_error <- function(x) sd(x) / sqrt(length(x))
#get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
#checkit
ggplot(data = world) + geom_sf() +geom_sf(data = shape, fill = "blue") +
coord_sf(xlim=c(-80, -70), ylim=c(30,40), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black"))
#load temp data
p915 <- read.csv("G:/My Drive/NCTempProject/P915/p915final.csv")
View(p915)
df$date <- as.Date(df$date, tryFormats = c("%m/%d/%Y"))
#load temp data
df <- read.csv("G:/My Drive/NCTempProject/P915/p915final.csv")
View(df)
df$date <- as.Date(df$date)
df <- df %>% dplyr::select(date, temp, surfacesal, surfacedo, pH, latitude, longitude)
df$temp <- df$surfacetemp
df <- df %>% dplyr::select(date, temp, surfacesal, surfacedo, pH, latitude, longitude)
View(df)
coordinates(df) <- ~ longitude + latitude
df_extract <- st_intersection(df, grid)
#idk what this does
coordinates(df) <- ~ longitude + latitude
df <- df %>% dplyr::select(date, temp, surfacesal, surfacedo, pH, latitude, longitude) %>% drop_na(latitude, longitude)
#idk what this does
coordinates(df) <- ~ longitude + latitude
df <- st_as_sf(df)
df <- st_set_crs(df, 4326)
grid <- shape
df_extract <- st_intersection(df, grid)
df_extract_2 <- as.data.frame(df_extract)
df_extract_point <- df_extract_2$geometry
plot(st_geometry(df_extract_point))
df_extract_2$gridID <- df_extract_2$Class
df_extract_2$coords <- do.call(rbind, st_geometry(df_extract_point)) %>%
as_tibble() %>% setNames(c("longitude","latitude"))
df_extract_2 <- unnest(df_extract_2)
df_extract_2_2 <- df_extract_2[!duplicated(df_extract_2[c("date", "longitude","latitude")]),]
ggplot(data = world) + geom_sf() + geom_sf(data = shape)  + geom_point(data = df_extract_2_2, aes(x = longitude, y = latitude, color = gridID)) +
coord_sf(xlim=c(-80, -74), ylim=c(32,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + ggtitle(paste( "Subsetted Points")) + ggtitle(paste("Grid Subset")) + xlab("Longitude") + ylab("Latitude")
df <- df_extract_2_2
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::filter(Class == "PAMLICO") %>% dplyr::select(date, temp, ph, surfacesal, surfaceDO, latitude, longitude, Class, month, year)
df <- df %>% dplyr::filter(Class == "PAMLICO") %>% dplyr::select(date, temp, pH, surfacesal, surfaceDO, latitude, longitude, Class, month, year)
df <- df %>% dplyr::filter(Class == "PAMLICO") %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
pamlicodf <- df %>% dplyr::filter(Class == "PAMLICO") %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
df <- df_extract_2_2
capefear <- filter(df, Class = "CAPEFEAR")
df <- df_extract_2_2
capefear <- filter(df, Class == "CAPEFEAR")
new <- filter(df, Class == "NEW")
neuse <- filter(df, Class == "NEUSE")
pamlico <- filter(df, Class == "PAMLICO")
datalist <- list(capefear, new, neuse, pamlico)
names <- c("CAPEFEAR", "NEW", "NEUSE", "PAMLICO")
df <- datalist[[i]]
i = 1
df <- datalist[[i]]
label <- names[i]
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$gridID
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
df$region <- df$Class
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesalinity), sesal = standard_error(surfacesalinity), meanDO = mean(surfaceDO), seDO = standard_error(surfaceDO), samplesize = n())
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp), setemp = standard_error(temp), meansal = mean(surfacesal), sesal = standard_error(surfacesal), meanDO = mean(surfacedo), seDO = standard_error(surfacedo), meanpH = mean(pH), sepH = standard_error(pH), samplesize = n())
View(finaldf)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp, na.rm=TRUE), setemp = standard_error(temp), meansal = mean(surfacesal,na.rm=TRUE), sesal = standard_error(surfacesal,), meanDO = mean(surfacedo, na.rm=TRUE), seDO = standard_error(surfacedo), meanpH = mean(pH, na.rm=TRUE), sepH = standard_error(pH), samplesize = n())
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp, na.rm=TRUE), setemp = standard_error(temp), meansal = mean(surfacesal,na.rm=TRUE), sesal = standard_error(surfacesal), meanDO = mean(surfacedo, na.rm=TRUE), seDO = standard_error(surfacedo), meanpH = mean(pH, na.rm=TRUE), sepH = standard_error(pH), samplesize = n())
unique(df_extract_2_2$pH)
unique(df_extract_2_2$surfacetemp)
unique(df_extract_2_2$temp)
names <- c("capefearriver", "newriver", "neuseriver", "pamlicoriver")
min(finaldf$year)
getwd()
setwd("~/NC-Ecosystem-indicators/data")
write.csv(finaldf, paste0("~/NC-Ecosystem-indicators/data/p", min(finaldf$year), names[i], "WaterCB.csv"))
i = 2
df <- datalist[[i]]
label <- names[i]
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$Class
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp, na.rm=TRUE), setemp = standard_error(temp), meansal = mean(surfacesal,na.rm=TRUE), sesal = standard_error(surfacesal), meanDO = mean(surfacedo, na.rm=TRUE), seDO = standard_error(surfacedo), meanpH = mean(pH, na.rm=TRUE), sepH = standard_error(pH), samplesize = n())
setwd("~/NC-Ecosystem-indicators/scripts")
View(df_extract_2_2)
i = 2
i = 3
df <- datalist[[i]]
label <- names[i]
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$Class
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp, na.rm=TRUE), setemp = standard_error(temp), meansal = mean(surfacesal,na.rm=TRUE), sesal = standard_error(surfacesal), meanDO = mean(surfacedo, na.rm=TRUE), seDO = standard_error(surfacedo), meanpH = mean(pH, na.rm=TRUE), sepH = standard_error(pH), samplesize = n())
i = 4
df <- datalist[[i]]
label <- names[i]
df$date <- as.Date(df$date)
df$year <- format(df$date,"%Y")
df$month <- format(df$date,"%m")
df <- df %>% dplyr::select(date, temp, pH, surfacesal, surfacedo, latitude, longitude, Class, month, year)
df$month <- as.numeric(as.character(df$month))
df$year <- as.numeric(as.character(df$year))
df$region <- df$Class
season <- c("winter", "winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall")
season <- as.data.frame(season)
season$month <- 1:12
df <- merge(df, season, by = "month", all.x = TRUE)
finaldf <- df %>% group_by(year, season) %>% summarise(meantemp = mean(temp, na.rm=TRUE), setemp = standard_error(temp), meansal = mean(surfacesal,na.rm=TRUE), sesal = standard_error(surfacesal), meanDO = mean(surfacedo, na.rm=TRUE), seDO = standard_error(surfacedo), meanpH = mean(pH, na.rm=TRUE), sepH = standard_error(pH), samplesize = n())
shape <- sf::read_sf(file.path("~/NC-Ecosystem-indicators/data/SAVRegions.shp"))
getwd()
setwd("C:/Users/Camryn/Documents/NC-Ecosystem-indicators/)
setwd("C:/Users/Camryn/Documents/NC-Ecosystem-indicators/")
shape <- sf::read_sf(file.path("~/data/SAVRegions.shp"))
getwd()
shape <- sf::read_sf(file.path("/data/SAVRegions.shp"))
shape <- sf::read_sf(file.path("data/rivers.shp"))
shape <- sf::read_sf(file.path("~/data/rivers.shp"))
