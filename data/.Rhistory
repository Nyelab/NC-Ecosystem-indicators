tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(temp, na.rm = TRUE)) %>% ungroup()
outliers <- identify_outliers(tsdf, temp)
if(nrow(outliers) > 0) {
outliers <- filter(outliers, is.extreme)
tsdf <- anti_join(tsdf, outliers, by = "year")
}
}
ggplot(data = tsdf, mapping = aes(x = year, y = temp)) + geom_point() + geom_smooth()
linearmod <- lm(temp ~ year, data=tsdf)
coef <- summary(linearmod)$coefficients[,1]
lmcoef <- coef[["year"]]
lmcoefs <- c(lmcoefs, lmcoef)
new <- summary(linearmod)$coefficients[,4]
lmpvalue <- new[["year"]]
lmvalue <- c(lmvalue, lmpvalue)
}
my_nested_list <- list(dataset, lmcoefs, lmvalue)
significance <- as.data.frame(do.call(cbind, my_nested_list))
names(significance) <- c("dataset", "lmcoef", "lmpval")
significance$lmcoef <- as.numeric(significance$lmcoef)
significance$lmpval <- as.numeric(significance$lmpval)
significance$lmsignif <- ifelse(significance$lmpval < 0.05, "*", "")
significance$lmtrend <- ifelse(significance$lmcoef > 0, "positive", "negative")
View(significance)
i = 7
df <- datalist[[i]]
names(df) <- tolower(names(df))
df$date <- as.Date(df$date)
df$month <- as.numeric(format(df$date, "%m"))
df$year <- as.numeric(format(df$date, "%Y"))
df <- filter(df, year > 1979)
label <- data_files[i]
dataset  <- c(dataset, label)
outliers <- rstatix::identify_outliers(df, temp)
df <- anti_join(df, outliers, by = "date")
#complete years only for daily
if(frequencies[i] == 365) {
if(yday(min(df$date)) != 1) {
minyear <- as.numeric(format(min(df$date), "%Y"))
minyear <- minyear + 1
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
}
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
mindate <- as.Date(paste0(minyear-1, "-12-31"))
tsdf <- filter(tsdf, date > mindate & date < as.Date("2023-01-01"))
#add NAs to fill out entire time series
allDates <- seq.Date(
min(tsdf$date),
max(tsdf$date),
"day")
tsdf <- merge(
x=data.frame(date=allDates),
y=tsdf,
all.x=TRUE)
#approximate missing data (trying)
tsdf <- tsdf %>% mutate(approx = na.approx(temp))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(approx, na.rm = TRUE)) %>% ungroup()
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
maxyear <- as.numeric(format(max(df$date), "%Y"))
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(temp, na.rm = TRUE)) %>% ungroup()
outliers <- identify_outliers(tsdf, temp)
if(nrow(outliers) > 0) {
outliers <- filter(outliers, is.extreme)
tsdf <- anti_join(tsdf, outliers, by = "year")
}
}
ggplot(data = tsdf, mapping = aes(x = year, y = temp)) + geom_point() + geom_smooth()
hello <- apply(significance, 2 ,as.character)
write.csv(hello, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualsignificancetablerawpost1980.csv")
#annual temps
#format data
mannken <- list()
mannkencoef <- list()
senscoef <- list()
senspval <- list()
sensseascoef <- list()
#calculate slopes
for (i in 1:length(datalist)){
label <- data_files[i]
df <- datalist[[i]]
df$date <- as.Date(df$date)
df <- dplyr::select(df, date, temp, latitude, longitude)
df <- na.omit(df)
#complete years only for daily
if(frequencies[i] == 365) {
if(yday(min(df$date)) != 1) {
minyear <- as.numeric(format(min(df$date), "%Y"))
minyear <- minyear + 1
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
}
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
mindate <- as.Date(paste0(minyear-1, "-12-31"))
tsdf <- filter(tsdf, date > mindate & date < as.Date("2023-01-01"))
#add NAs to fill out entire time series
allDates <- seq.Date(
min(tsdf$date),
max(tsdf$date),
"day")
tsdf <- merge(
x=data.frame(date=allDates),
y=tsdf,
all.x=TRUE)
#approximate missing data (trying)
tsdf <- tsdf %>% mutate(approx = na.approx(temp))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(approx, na.rm = TRUE)) %>% ungroup()
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
maxyear <- as.numeric(format(max(df$date), "%Y"))
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(temp, na.rm = TRUE)) %>% ungroup()
outliers <- identify_outliers(tsdf, temp)
if(nrow(outliers) > 0) {
outliers <- filter(outliers, is.extreme)
tsdf <- anti_join(tsdf, outliers, by = "year")
}
}
#make ts object
ts <- dplyr::select(tsdf, temp)
ts <- ts(data = ts, frequency = 1)
plot(ts)
#mann kendall
mk <- mk.test(ts)
coef <- mk$estimates[3]
pval <- mk$p.value
mannkencoef <- c(mannkencoef, coef)
mannken <- c(mannken, pval)
#this takes 2.5 min
sens <- sens.slope(ts)
coef <- as.numeric(sens$estimates)
pval <- sens$p.value
senscoef <- c(senscoef, coef)
senspval <- c(senspval, pval)
}
my_nested_list <- list(mannkencoef, mannken, senscoef, senspval)
significance <- as.data.frame(do.call(cbind, my_nested_list))
names(significance) <- c( "mannkencoef", "mannkenpval", "senscoef", "senspval")
significance$mannkentrend <- ifelse(significance$mannkencoef > 0, "positive", "negative")
significance$mannkensignif <- ifelse(significance$mannkenpval < 0.05, "*", "")
significance$senstrend <- ifelse(significance$senscoef > 0, "positive", "negative")
significance$senssignif <- ifelse(significance$senspval < 0.05, "*", "")
significance$names <- datanames
significance <- select(significance, names, mannkencoef, mannkenpval, mannkensignif, mannkentrend, senscoef, senspval, senssignif, senstrend)
significance <- as.data.frame(significance)
hello <- apply(significance, 2 ,as.character)
write.csv(hello, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualnonparametricslopesraw.csv")
nonparametric <- read.csv("G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualsignificancetablerawpost1980.csv")
linear <- read.csv("G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualnonparametricslopesraw.csv")
final <- merge(nonparametric, linear, by = "dataset")
View(linear)
View(nonparametric)
View(nonparametric)
names(nonparametric)
names(nonparametric) <- c("index", "names", "lmcoef",  "lmpval", "lmsignif", "lmtrend" )
final <- merge(nonparametric, linear, by = "dataset")
final <- merge(nonparametric, linear, by = "names")
nonparametric$names <- gsub(".csv", "", nonparametric$names)
final <- merge(nonparametric, linear, by = "names")
View(final)
final <- final[ , -which(names(final) %in% c("X","index"))]
write.csv(final, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualtempsbothnonparametricandlineartrends.csv")
i = 1
#test normality
normal <- list()
i = 1
df <- datalist[[i]]
names(df) <- tolower(names(df))
df$date <- as.Date(df$date)
df$month <- as.numeric(format(df$date, "%m"))
df$year <- as.numeric(format(df$date, "%Y"))
df <- filter(df, year > 1979)
shapiro.test(df)
shapiro.test(df$temp)
shapiro_test(df$temp)
shapiro_test(df$temp[0:5000])
install.packages("nortest")
ad.test(df$temp)$p.value
nortest::ad.test(df$temp)$p.value
shapiro <- shapiro_test(df$temp[0:5000])
shapiro <- shapiro_test(df$temp[0:5000])$pvalue
shapiro <- shapiro_test(df$temp[0:5000])
shapiro <- shapiro_test(df$temp[0:5000])$p.value
adtest <- nortest::ad.test(df$temp)$p.value
#test normality
shapiropval <- list()
adtestpval <- list()
shapiropval <- c(shapiropval, shapiro)
adtestpval <- c(adtestpval, adtest)
shapiropval <- list()
adtestpval <- list()
for (i in 1:length(datalist)){
df <- datalist[[i]]
names(df) <- tolower(names(df))
df <- filter(df, year > 1979)
if(nrow(df) > 5000) {
shapiro <- shapiro_test(df$temp[0:5000])$p.value
shapiropval <- c(shapiropval, shapiro)
adtest <- nortest::ad.test(df$temp)$p.value
adtestpval <- c(adtestpval, adtest)
} else {
shapiro <- shapiro_test(df$temp)$p.value
shapiropval <- c(shapiropval, shapiro)
adtest <- "NA"
adtestpval <- c(adtestpval, adtest)
}
}
#test normality
shapiropval <- list()
adtestpval <- list()
for (i in 1:length(datalist)){
df <- datalist[[i]]
names(df) <- tolower(names(df))
df$date <- as.Date(df$date)
df$month <- as.numeric(format(df$date, "%m"))
df$year <- as.numeric(format(df$date, "%Y"))
df <- filter(df, year > 1979)
if(nrow(df) > 5000) {
shapiro <- shapiro_test(df$temp[0:5000])$p.value
shapiropval <- c(shapiropval, shapiro)
adtest <- nortest::ad.test(df$temp)$p.value
adtestpval <- c(adtestpval, adtest)
} else {
shapiro <- shapiro_test(df$temp)$p.value
shapiropval <- c(shapiropval, shapiro)
adtest <- "NA"
adtestpval <- c(adtestpval, adtest)
}
}
my_nested_list <- list(datanames, shapiropval, adtestpval)
significance <- as.data.frame(do.call(cbind, my_nested_list))
View(significance)
names(significance) <- c("names", "shapiriopval", "adtestpval")
significance$shapironormal <- ifelse(significance$shapiropval > 0.05, "*", "")
significance$adtestnormal <- ifelse(significance$adtestpval > 0.05, "*", "")
significance$shapironormal <- ifelse(significance$shapiropval > 0.05, "*", "")
significance$shapironormal <- ifelse(significance$shapiropval < 0.05, "*", "")
significance$shapiropval
names(significance) <- c("names", "shapiropval", "adtestpval")
significance$shapironormal <- ifelse(significance$shapiropval < 0.05, "*", "")
significance$adtestnormal <- ifelse(significance$adtestpval > 0.05, "*", "")
significance$adtestnormal <- ifelse(significance$adtestpval < 0.05, "*", "")
significance$shapironormal <- ifelse(significance$shapiropval < 0.05, "not normal", "normal")
significance$adtestnormal <- ifelse(significance$adtestpval < 0.05, "not normal", "normal")
hist(df)
hist(df$temp)
hello <- apply(significance, 2 ,as.character)
write.csv(hello, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/normality.csv")
normality <- read.csv("G:/My Drive/NCTempProject/Figures/linearandquantilefigures/normality.csv")
View(normality)
final <- merge(final, normality, by = "names")
View(final)
final <- final[ , -which(names(final) %in% c("X"))]
write.csv(final, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/annualtempsbothnonparametricandlineartrends.csv")
#data import
datalist <- list()
datanames <- list()
data_files <- list.files("G:/My Drive/NCTempProject/formattedcsvs/")
data_files
#deq alone bc its stupid
deq <- read.csv("G:/My Drive/NCTempProject/formattedcsvs/deqcontinuousstationstemponly0403.csv")
df <- deq
names(df) <- tolower(names(df))
df$date <- as.Date(df$date)
df$date <- as.Date(df$date)
df$month <- as.numeric(format(df$date, "%m"))
df$year <- as.numeric(format(df$date, "%Y"))
df <- filter(df, year > 1979)
label <- "deq"
dataset  <- c(dataset, label)
outliers <- rstatix::identify_outliers(df, temp)
df$temp <- df$measure
outliers <- rstatix::identify_outliers(df, temp)
df <- anti_join(df, outliers, by = "date")
yday(min(df$date)
)
#complete years only for daily
if(yday(min(df$date)) != 1) {
minyear <- as.numeric(format(min(df$date), "%Y"))
minyear <- minyear + 1
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
}
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
mindate <- as.Date(paste0(minyear-1, "-12-31"))
tsdf <- filter(tsdf, date > mindate & date < as.Date("2023-01-01"))
#add NAs to fill out entire time series
allDates <- seq.Date(
min(tsdf$date),
max(tsdf$date),
"day")
tsdf <- merge(
x=data.frame(date=allDates),
y=tsdf,
all.x=TRUE)
#approximate missing data (trying)
tsdf <- tsdf %>% mutate(approx = na.approx(temp))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(approx, na.rm = TRUE)) %>% ungroup()
outliers <- identify_outliers(tsdf, temp)
if(nrow(outliers) > 0) {
outliers <- filter(outliers, is.extreme)
tsdf <- anti_join(tsdf, outliers, by = "year")
}
ggplot(data = tsdf, mapping = aes(x = year, y = temp)) + geom_point() + geom_smooth()
linearmod <- lm(temp ~ year, data=tsdf)
coef <- summary(linearmod)$coefficients[,1]
lmcoef <- coef[["year"]]
new <- summary(linearmod)$coefficients[,4]
lmpvalue <- new[["year"]]
#make ts object
ts <- dplyr::select(tsdf, temp)
ts <- ts(data = ts, frequency = 1)
plot(ts)
#mann kendall
mk <- mk.test(ts)
coef <- mk$estimates[3]
pval <- mk$p.value
mannkencoef <- c(mannkencoef, coef)
mkcoef <- mk$estimates[3]
mkpval <- mk$p.value
#this takes 2.5 min
sens <- sens.slope(ts)
senscoef <- as.numeric(sens$estimates)
senspval <- sens$p.value
hist(df$temp)
if(nrow(df) > 5000) {
shapiro <- shapiro_test(df$temp[0:5000])$p.value
adtest <- nortest::ad.test(df$temp)$p.value
} else {
shapiro <- shapiro_test(df$temp)$p.value
adtest <- "NA"
}
deqmetrics <- c(lmcoef, lmpvalue, mkcoef, mkpval, senscoef, senspval, shapiro, adtest)
deqmetrics <- as.data.frame(deqmetrics)
hist(df$temp)
View(deqmetrics)
deqmetrics$name <- c("lmcoef", "lmpvalue", "mkcoef", "mkpval", "senscoef", "senspval", "shapiro", "adtest")
View(deqmetrics)
View(tsdf)
write.csv("G:/My Drive/NCTempProject/Figures/linearandquantilefigures/deqannualtempsbothnonparametricandlineartrends.csv")
write.csv(deqmetrics, "G:/My Drive/NCTempProject/Figures/linearandquantilefigures/deqannualtempsbothnonparametricandlineartrends.csv")
data_list
datalist
#data import
datalist <- list()
datanames <- list()
data_files <- list.files("G:/My Drive/NCTempProject/formattedcsvs/")
data_files <- data_files[-c(3, 4, 5, 6, 7, 8, 9, 21, 22, 23)]
directory <- "G:/My Drive/NCTempProject/formattedcsvs/"
for(i in 1:length(data_files)) {
datalist[[i]] <- read.csv(paste0(directory, data_files[i]))
label <- gsub(".csv","", data_files[i])
datanames <- c(datanames, label)
}
#make frequencies (times per year) for time series
frequencies <- c(365, 365, 365, 12, 365, 12, 12, 365, 2, 2, 11, 12, 12, 365)
#annual temps LINEAR
lmvalue <- list()
lmcoefs <- list()
dataset <- list()
datanames
i = 5
df <- datalist[[i]]
names(df) <- tolower(names(df))
df$date <- as.Date(df$date)
df$month <- as.numeric(format(df$date, "%m"))
df$year <- as.numeric(format(df$date, "%Y"))
df <- filter(df, year > 1979)
label <- data_files[i]
dataset  <- c(dataset, label)
outliers <- rstatix::identify_outliers(df, temp)
df <- anti_join(df, outliers, by = "date")
frequencies[i] == 365
yday(min(df$date))
minyear <- as.numeric(format(min(df$date), "%Y"))
minyear <- minyear + 1
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
mindate <- as.Date(paste0(minyear-1, "-12-31"))
tsdf <- filter(tsdf, date > mindate & date < as.Date("2023-01-01"))
View(tsdf)
#add NAs to fill out entire time series
allDates <- seq.Date(
min(tsdf$date),
max(tsdf$date),
"day")
tsdf <- merge(
x=data.frame(date=allDates),
y=tsdf,
all.x=TRUE)
#approximate missing data (trying)
tsdf <- tsdf %>% mutate(approx = na.approx(temp))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(approx, na.rm = TRUE)) %>% ungroup()
View(tsdf)
ggplot(data = tsdf, mapping = aes(x = year, y = temp)) + geom_point() + geom_smooth()
ggplot(data = df, mapping = aes(x = year, y = temp)) + geom_point() + geom_smooth()
linearmod <- lm(temp ~ year, data=tsdf)
coef <- summary(linearmod)$coefficients[,1]
lmcoef <- coef[["year"]]
lmcoefs <- c(lmcoefs, lmcoef)
new <- summary(linearmod)$coefficients[,4]
lmpvalue <- new[["year"]]
lmvalue <- c(lmvalue, lmpvalue)
View(adtestpval)
setwd("C:/Users/Camryn/Documents/NC-Ecosystem-indicators/data")
newdf <- read.csv("C:/Users/Camryn/Documents/NC-Ecosystem-indicators/data/p1980hurricanesLS.csv")
View(newdf)
min(newdf$Year)
max(newdf$Year)
df <- data.frame(newdf, bin=cut(x1,c(1980, 1984, 1990, 1994, 2000, 2004, 2010, 2014, 2020), include.lowest=TRUE))
df <- data.frame(newdf, bin=cut(newdf, c(1980, 1984, 1990, 1994, 2000, 2004, 2010, 2014, 2020), include.lowest=TRUE))
df <- data.frame(newdf, bin=cut(newdf$Year, c(1980, 1984, 1990, 1994, 2000, 2004, 2010, 2014, 2020), include.lowest=TRUE))
View(df)
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_bar()
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col()
mean(df$NumNCStorms, na.rm = TRUE)
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col()
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col() + geom_hline(yintercept = mean(df$NumNCStorms, na.rm = TRUE))
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col() + geom_hline(yintercept = mean(df$NumNCStorms, na.rm = TRUE)) + ggtitle("NC Hurricanes in 5 Year Bins")
ggsave("C:/Users/Camryn/Documents/HurricanesIndicator.png")
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col() + geom_hline(yintercept = mean(df$NumNCStorms, na.rm = TRUE)) + ggtitle("NC Hurricanes in 5 Year Bins")
df %>% group_by(bin) %>% mean(NumNCStorms, na.rm = TRUE)
plz <- df %>% group_by(bin) %>% mean(NumNCStorms, na.rm = TRUE)
plz <- df %>% group_by(bin) %>% summarize(mean(NumNCStorms, na.rm = TRUE))
plz <- df %>% group_by(bin) %>% summarize(mean =mean(NumNCStorms, na.rm = TRUE))
View(plz)
mean(plz$mean)
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col() + geom_hline(yintercept = 2.64375)) + ggtitle("NC Hurricanes in 5 Year Bins")
ggplot(data = df, mapping = aes(x = bin, y = NumNCStorms)) + geom_col() + geom_hline(yintercept = 2.64375) + ggtitle("NC Hurricanes in 5 Year Bins")
ggsave("C:/Users/Camryn/Documents/HurricanesIndicator.png")
i = 1
label <- data_files[i]
df <- datalist[[i]]
df$date <- as.Date(df$date)
df <- dplyr::select(df, date, temp, latitude, longitude)
df <- na.omit(df)
#complete years only for daily
if(frequencies[i] == 365) {
if(yday(min(df$date)) != 1) {
minyear <- as.numeric(format(min(df$date), "%Y"))
minyear <- minyear + 1
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
}
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
mindate <- as.Date(paste0(minyear-1, "-12-31"))
tsdf <- filter(tsdf, date > mindate & date < as.Date("2023-01-01"))
#add NAs to fill out entire time series
allDates <- seq.Date(
min(tsdf$date),
max(tsdf$date),
"day")
tsdf <- merge(
x=data.frame(date=allDates),
y=tsdf,
all.x=TRUE)
#approximate missing data (trying)
tsdf <- tsdf %>% mutate(approx = na.approx(temp))
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(approx, na.rm = TRUE)) %>% ungroup()
} else {
minyear <- as.numeric(format(min(df$date), "%Y"))
maxyear <- as.numeric(format(max(df$date), "%Y"))
tsdf <- df
tsdf$year <- as.numeric(format(tsdf$date, "%Y"))
tsdf <- tsdf %>% filter(year >= minyear) %>% filter(date < as.Date("2023-01-01"))
tsdf <- tsdf %>% group_by(year) %>% summarise(temp = mean(temp, na.rm = TRUE)) %>% ungroup()
outliers <- identify_outliers(tsdf, temp)
if(nrow(outliers) > 0) {
outliers <- filter(outliers, is.extreme)
tsdf <- anti_join(tsdf, outliers, by = "year")
}
}
View(tsdf)
#make ts object
ts <- dplyr::select(tsdf, temp)
ts <- ts(data = ts, frequency = 1)
plot(ts)
#sens slope
sens <- sens.slope(ts)
coef <- as.numeric(sens$estimates)
View(sens)
install.packages("zyp")
library(zyp)
interecept <- zyp.sen(temp~year, tsdf)
View(interecept)
#sens slope
sens <- zyp.sen(temp~year, tsdf)
coef <- as.numeric(sens$coefficients[["year"]])
intercept <- as.numeric(sens$coefficients[["Intercept"]])
